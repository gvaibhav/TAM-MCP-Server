version: '3.8'

services:
  # Main MCP server
  tam-mcp-server:
    build: 
      context: .
      target: production
    container_name: tam-mcp-server
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - SESSION_SECRET=${SESSION_SECRET:-change-me-in-production}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - CACHE_TTL=${CACHE_TTL:-300}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      # Add your API keys here
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY}
      - INDUSTRY_ANALYSIS_API_KEY=${INDUSTRY_ANALYSIS_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - mcp-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/mcp/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for distributed caching (optional)
  redis:
    image: redis:7-alpine
    container_name: market-sizing-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: market-sizing-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: market-sizing-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: market-sizing-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - mcp-network
    depends_on:
      - market-sizing-mcp

# Development override
  market-sizing-mcp-dev:
    build:
      context: .
      target: development
    container_name: market-sizing-mcp-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - SESSION_SECRET=dev-secret-key
      - LOG_LEVEL=debug
      - USE_MOCK_DATA=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - mcp-network
    profiles:
      - development

networks:
  mcp-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
